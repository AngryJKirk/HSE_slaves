/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ArrayOfIds;
import io.swagger.model.RegistrationData;
import io.swagger.model.UserData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-03-06T09:35:01.608Z")

@Validated
@Api(value = "users", description = "the users API")
@RequestMapping(value = "")
public interface UsersApi {

    @ApiOperation(value = "", nickname = "createUser", notes = "New user has registrated.", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation"),
        @ApiResponse(code = 404, message = "Some error idk"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createUser(@ApiParam(value = "User data" ,required=true )  @Valid @RequestBody RegistrationData regData);


    @ApiOperation(value = "", nickname = "deleteUser", notes = "Delete user", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{userId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "ID of a user",required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "", nickname = "getUserData", notes = "Get all information about user with given userId.", response = UserData.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = UserData.class),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserData> getUserData(@ApiParam(value = "ID of a user",required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "", nickname = "getUserEvents", notes = "Get all user's events.", response = ArrayOfIds.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ArrayOfIds.class),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{userId}/events",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ArrayOfIds> getUserEvents(@ApiParam(value = "ID of a user",required=true) @PathVariable("userId") Long userId);


    @ApiOperation(value = "", nickname = "getUserPosts", notes = "Get all user's posts.", response = ArrayOfIds.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ArrayOfIds.class),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{userId}/posts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ArrayOfIds> getUserPosts(@ApiParam(value = "ID of a user",required=true) @PathVariable("userId") Long userId);

}
