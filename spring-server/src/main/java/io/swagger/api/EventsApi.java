/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ArrayOfIds;
import io.swagger.model.Event;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-03-06T09:35:01.608Z")

@Validated
@Api(value = "events", description = "the events API")
@RequestMapping(value = "")
public interface EventsApi {

    @ApiOperation(value = "", nickname = "createEvents", notes = "", tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/events",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createEvents(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Event body);


    @ApiOperation(value = "", nickname = "deleteEvent", notes = "", tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "events not found") })
    @RequestMapping(value = "/events/{eventId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEvent(@ApiParam(value = "",required=true) @PathVariable("eventId") Long eventId);


    @ApiOperation(value = "", nickname = "getAllEvents", notes = "", response = ArrayOfIds.class, tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ArrayOfIds.class) })
    @RequestMapping(value = "/events",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ArrayOfIds> getAllEvents();


    @ApiOperation(value = "", nickname = "getEventById", notes = "", response = Event.class, tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Event.class),
        @ApiResponse(code = 400, message = "Invalid id"),
        @ApiResponse(code = 404, message = "events not found") })
    @RequestMapping(value = "/events/{eventId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Event> getEventById(@ApiParam(value = "",required=true) @PathVariable("eventId") Integer eventId);


    @ApiOperation(value = "", nickname = "updatEvent", notes = "", tags={ "events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 404, message = "events not found") })
    @RequestMapping(value = "/events/{eventId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatEvent(@ApiParam(value = "",required=true) @PathVariable("eventId") Long eventId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Event body);

}
